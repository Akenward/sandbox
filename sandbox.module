<?php
 
/*
 * Builds a form to allow update of selected node fields
 * @parameter $nid: an extra parameter for the node nid
 */
function request_updater($form, &$form_state, $nid) {
  $request = node_load($nid);
  $language = $request->language;
  $current_status = $request->field_request_status[$language][0]['taxonomy_term'];
  // Updates are only allowed to the status or notes if the current status of the request is 
  // 'transitional' (not an end-state).
  $transitional = ($current_status->field_transitional[$language][0]['value']);
  // We also need to check that the current user is authenticated.
  if (user_is_logged_in() && $transitional) {
    // If the form has no parent, we can get errors with some more complex field types
    // including term reference
    if (!isset($form['#parents'])) {
      $form['#parents'] = array();
    }
    // Set up an array containing the fields to be made editable
    $edit_fields = array(
      'field_request_status',
      'body'
    );
    // loop through the editable fields using field_default_form to produce 
    // a form element for each field based on its default widget and with
    // its current value set as default 
    foreach($edit_fields as $field_name) {
      $instance = field_info_instance('node', $field_name, 'request');
      $field = field_info_field_by_id($instance['field_id']);
      $items = field_get_items('node', $request, $field_name);
	  $form_element = field_default_form('node', $request, $field, $instance, 
$language, $items, $form, $form_state);
      $form = array_merge($form, $form_element);
    }
    // save the nid as a value in the form so it can be accessed by the
    // submit and validation handlers
    $form['request_nid'] = array(
      '#type' => 'value',
      '#value' => $nid,
    );
    // set the #access attribute for the form to 'true' to tell the function 
    // receiving it that the form is not empty and that it can be displayed
    $form['#access'] =  true;
    // save the array of editable fields in the form as an easy reference
    // for the receiving function
    $form['fields_replaced'] = array(
      '#type' => 'value',
      '#value' => $edit_fields,
    );
    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => t("Save"),
    );
  }
  else {
    // if fields are not to be exposed for editing for the current state 
    // of the node and/or credentials of the current user, the form is
    // returned empty except for the #access attribute set to false
    $form['#access'] = false;
  }
  return $form;
}

/*
 * validation handler for the updater form
 */
function request_updater_validate ($form, &$form_state) {
  // insert validation code if required
}

/*
 * submit handler for the updater form
 */
function request_updater_submit($form, &$form_state) {
  // use the nid stored in the form to retrieve the node object
  $request = node_load($form['request_nid']['#value']);
  $language = $request->language;
  // Update the node with new values from $form_state
  field_attach_submit('node', $request, $form, $form_state, array());
  // if the status of the application has changed to an end-state, 
  // then the value of 'decision date' (ISO date field) is set for today
  $new_status_state = $form_state['values']['field_request_status'];
  $new_status = taxonomy_term_load($new_status_state[$language][0]['tid']);
  $new_status_end = (!$new_status->field_transitional[$language][0]['value']);
  if ($new_status_end) {
    $today = new DateTime;
    $request->field_decision_date[$language][0]['value'] = $today->getTimestamp();
  }
  node_save($request);
}
