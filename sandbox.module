<?php
 
/**
 * Implements hook_node_info().
 *
 * We use hook_node_info() to define our node content type.
 */
function sandbox_node_info() {
  // We define the node type as an associative array.
  return array(
    'job_application' => array(
      'name' => t('Job Application'),
      // 'base' tells Drupal the base string for hook functions.
      // This is often the module name; if base is set to 'mymodule',
      // Drupal would call mymodule_insert() or similar for node
      // hooks. In our case, the base is 'node_example'.
      'base' => 'job_application',
      'description' => t('This is a node type for managing job applications.'),
      'title_label' => t('Applicant'),
      // We'll set the 'locked' attribute to TRUE, so users won't be
      // able to change the machine name of our content type.
      'locked' => TRUE,
    ),
  );
}

/**
 * Implements hook_form().
 *
 * Drupal needs for us to provide a form that lets the user
 * add content. This is the form that the user will see if
 * they go to node/add/node-example.
 *
 * You can get fancy with this form, or you can just punt
 * and return the default form that node_content will provide.
 */
function job_application_form($node, $form_state) {
  return node_content_form($node, $form_state);
}

function sandbox_node_type_insert($content_type) {
  if ($content_type->type == 'job_application') {
    // First we add the body field. Node API helpfully gives us
    // node_add_body_field().
    // We'll set the body label now, although we could also set
    // it along with our other instance properties later.
    $body_instance = node_add_body_field($content_type, t('Progress Notes'));
	
	$body_instance['display']['default'] = array(
      'label' => 'above',
      'type' => 'text_textarea_with_summary',
    );

    // Save our changes to the body field instance.
    field_update_instance($body_instance);
	
	// Create all the fields we are adding to our content type.
    foreach (_job_application_installed_fields() as $field) {
      field_create_field($field);
    }

    // Create all the instances for our fields.
    foreach (_job_application_installed_instances() as $instance) {
      $instance['entity_type'] = 'node';
      $instance['bundle'] = 'job_application';
      field_create_instance($instance);
    }
  }
}
 
function sandbox_updater($form, &$form_state, $nid) {
	
  // Use the extra node->nid parameter sent via drupal_get_form to retrieve the 
  // application node object and create an entity wrapper for it.
  $application_node = node_load($nid);
  $e_wrapper = entity_metadata_wrapper('node', $application_node);
  
  // Retrieve the current status of the application (a taxonomy item object)
  // If it is not 'transitional' i.e. an end-state then the user is not given
  // access to the form to change notes or status
  $status = $e_wrapper->field_status->value();
  if ($status->field_transitional['und'][0]['value'] == 1) {
  	// Retrieve and sanitize the application notes from the body field
  	$notes = $e_wrapper->body->value();
	$notes_value = filter_xss($notes['value']);
	// Retrieve the status taxonomy vocabulary, build the options for a
	// select form element and find the default value corresponding to the 
	// current application status.
    $status_taxonomy = (taxonomy_get_tree($status->vid));
    $options_array = array();
    foreach ($status_taxonomy as $key => $option) {
	  $options_array[] = t($option->name);
    }
    $current_key = array_search($status->name, $options_array);
	
	// Set up the form controls (select for the application status and textarea
	// using text formats available to the user for application notes, 
	// and a submit button)
    $form['application_status'] = array(
      '#type' => 'select',
      '#title' => t('Application status:'),
      '#default_value' => $current_key,
      '#options' => $options_array,
    );
  
    $form['notes'] = array(
      '#type' => 'text_format',
	  '#title' => 'Evaluator notes:',
	  '#default_value' => $notes_value,
    );
    
    $form['submit_button'] = array(
      '#type' => 'submit',
      '#value' => 'submit',
    );
	
	// Store values for use elsewhere: application node nid, flag to show that
	// the form has been built and an array of node fields covered by the form.
	$form['application_nid'] = array(
      '#type' => 'value',
      '#value' => $nid,
    );
	
	$form['form_needed'] = array(
      '#type' => 'value',
      '#value' => true,
    );
	
	$form['fields_replaced'] = array(
	  '#type' => 'value',
	  '#value' => array (
	    'field_status',
	    'body',
	  ),
	);
  }

  // If the current node status is an end-state (can't be changed)
  // then the form isn't built and the form_needed value is set to false
  else {
  	$form['form_needed'] = array(
      '#type' => 'value',
      '#value' => false,
    );
  }
  return $form;
}

function sandbox_updater_validate ($form, &$form_state) {
  //insert validation if required
}
function sandbox_updater_submit($form, &$form_state) {
  // Use the node->nid, saved in the form as a value, to retrieve the 
  // application node object and create an entity wrapper for it.
  $application_node = node_load($form['application_nid']['#value']);
  $e_wrapper = entity_metadata_wrapper('node', $application_node);
  
  // Get the selected value for status from the form_state and find the
  // corresponding taxonomy item in the status vocabulary and set it as the
  // new status value in the node
  $current_status = $e_wrapper->field_status->value();
  $status_taxonomy = (taxonomy_get_tree($current_status->vid));
  $new_status = $status_taxonomy[($form_state['values']['application_status'])];
  $e_wrapper->field_status->set($new_status);
  
  // Update the node->body value with the updated application notes 
  $e_wrapper->body->value->set($form_state['values']['notes']['value']);
  $e_wrapper->save();
}

/**
 * Define the fields for our content type.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the fields we wish to add to our
 *   new node type.
 */
function _job_application_installed_fields() {
  return array(
    'job_application_role' => array(
      'field_name' => 'job_application_role',
      'cardinality' => 1,
      'type'        => 'text',
      'settings'    => array(
        'max_length' => 50,
      ),
    ),
    'job_application_status' => array(
      'field_name'  => 'job_application_status',
      'cardinality' => 1,
      'type'        => 'taxonomy_term_reference',
      'settings' => array(
        'allowed_values' => array(
          array(
            'vocabulary' => 'application_status',
            'parent' => 0
          ),
        ),
      ),
    ),
  );
}

/**
 * Define the field instances for our content type.
 *
 * The instance lets Drupal know which widget to use to allow the user to enter
 * data and how to react in different view modes.  We are going to display a
 * page that uses a custom "node_example_list" view mode.  We will set a
 * cardinality of three allowing our content type to give the user three color
 * fields.
 *
 * This big array is factored into this function for readability.
 *
 * @return array
 *   An associative array specifying the instances we wish to add to our new
 *   node type.
 */
function _job_application_installed_instances() {
  $terms = taxonomy_get_term_by_name('Pending');
  reset($terms);
  $default_tid = key($terms);
  return array(
    'job_application_role' => array(
      'field_name' => 'job_application_role',
      'label'       => t('The role applied for.'),
      'widget'      => array(
        'type'    => 'text_textfield',
      ),
        'display' => array(
          'default' => array(
            'label' => 'inline',
		  ),
          'teaser' => array(
            'label' => 'hidden',
	      ),
	   ),
    ),
    'job_application_status' => array(
      'field_name'  => 'job_application_status',
      'entity_type' => 'node',
      'label' => 'Status',
      'bundle' => 'job_application',
      'required' => true,
      'widget' => array(
        'type' => 'options_select'
      ),
      'display' => array(
        'default' => array(
          'label' => 'inline',
          'type' => 'taxonomy_term_reference_link',
		 ),
        'teaser' => array(
          'label' => 'hidden',
          'type' => 'taxonomy_term_reference_link',
		 ),
      ),
	  'default_value' => array(
	    array(
	      'tid' => $default_tid,
		)
	  ),
	    
    ),
  );
}



